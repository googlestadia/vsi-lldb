From 80f02e4401576f3ab80557606c47e6ada5bc24b9 Mon Sep 17 00:00:00 2001
From: Andy Yankovsky <werat@google.com>
Date: Fri, 15 Jan 2021 14:08:01 +0100
Subject: [PATCH 5/6] [lldb] Support unscoped enumeration members in the
 expression evaluator.

Add unscoped enumeration members to the "globals" manual dwarf index. This
effectively makes them discoverable as global variables (which they
essentially are).

Before expression evaluator failed to lookup enumerators unless the
enumeration type has been already completed.

Consider the example:

```
enum MyEnum { eFoo = 1 };
MyEnum my_enum = eFoo;
```
```
(lldb) p eFoo
error: <user expression 2>:1:1: use of undeclared identifier 'eFoo'
eFirst
^
(lldb) p my_enum + eFoo
(int) $0 = 2
```

With this patch all unscoped enumerators can be looked up same as the global
variables and the expression evaluation works as expected.
SBTarget::FindGlobalVariables() now returns unscoped enumerators as well.

Differential revision: https://reviews.llvm.org/D94077
---
 .../lang/cpp/enum_types/TestCPP11EnumTypes.py | 38 ++++++++++++++++++
 .../test/lang/cpp/enum_types/main.cpp         | 39 +++++++++++++++++++
 .../target/globals/TestTargetGlobals.py       | 17 ++++++++
 .../test/python_api/target/globals/main.cpp   | 21 ++++++++++
 .../Clang/ClangExpressionDeclMap.cpp          | 17 ++++++++
 .../SymbolFile/DWARF/DWARFASTParserClang.cpp  | 30 +++++++++++++-
 .../SymbolFile/DWARF/ManualDWARFIndex.cpp     | 16 ++++++++
 .../SymbolFile/DWARF/SymbolFileDWARF.cpp      | 21 +++++++---
 lldb/source/Symbol/ClangASTContext.cpp        |  8 ++++
 9 files changed, 200 insertions(+), 7 deletions(-)

diff --git a/lldb/packages/Python/lldbsuite/test/lang/cpp/enum_types/TestCPP11EnumTypes.py b/lldb/packages/Python/lldbsuite/test/lang/cpp/enum_types/TestCPP11EnumTypes.py
index c58f700039eb..8e1f3383a36a 100644
--- a/lldb/packages/Python/lldbsuite/test/lang/cpp/enum_types/TestCPP11EnumTypes.py
+++ b/lldb/packages/Python/lldbsuite/test/lang/cpp/enum_types/TestCPP11EnumTypes.py
@@ -154,3 +154,41 @@ class CPP11EnumTypesTestCase(TestBase):
                 'check for valid enumeration value',
                 substrs=[enum_value])
             lldbutil.continue_to_breakpoint(self.process(), bkpt)
+
+    @skipIf(dwarf_version=['<', '4'])
+    def test_global_enumerator(self):
+        self.build(
+            dictionary={
+                'CFLAGS_EXTRAS': '"-DSIGNED_ENUM_CLASS_TYPE=int"'})
+        _ = self.dbg.CreateTarget(self.getBuildArtifact())
+
+        self.expect_expr("eFoo", result_type="MyEnum", result_value="eFoo")
+        self.expect_expr("MyEnum::eFoo", result_type="MyEnum", result_value="eFoo")
+        self.expect_expr("my_enum + eFoo + MyEnum::eFoo", result_value="3")
+
+        self.expect("p eBar", error=True,
+                    substrs=["use of undeclared identifier 'eBar'"])
+
+    @skipIf(dwarf_version=['<', '4'])
+    def test_enums_from_different_scopes(self):
+        self.build(
+            dictionary={
+                'CFLAGS_EXTRAS': '"-DSIGNED_ENUM_CLASS_TYPE=int"'})
+        _ = self.dbg.CreateTarget(self.getBuildArtifact())
+
+        lldbutil.run_break_set_by_source_regexp(
+            self, "// break here for enumerator", num_expected_locations=3)
+
+        # Break in A::g()
+        self.runCmd("run")
+        self.expect_expr("eValue", result_type="A::AEnum", result_value="eValue")
+
+        # Break in B::f()
+        self.runCmd("continue")
+        self.expect_expr("eValue", result_type="B::BEnum", result_value="eValue")
+
+        # Break in main()
+        self.runCmd("continue")
+        self.expect_expr("eValue", result_type="CEnum", result_value="eValue")
+
+        self.runCmd("kill")
diff --git a/lldb/packages/Python/lldbsuite/test/lang/cpp/enum_types/main.cpp b/lldb/packages/Python/lldbsuite/test/lang/cpp/enum_types/main.cpp
index e00fc2df4603..f700e04cf41f 100644
--- a/lldb/packages/Python/lldbsuite/test/lang/cpp/enum_types/main.cpp
+++ b/lldb/packages/Python/lldbsuite/test/lang/cpp/enum_types/main.cpp
@@ -8,6 +8,37 @@
 #include <stdio.h>
 #include <stdint.h>
 
+enum MyEnum {
+  eFoo = 1,
+};
+MyEnum my_enum = eFoo;
+
+enum class MyScopedEnum {
+  eBar = 1,
+};
+MyScopedEnum my_scoped_enum = MyScopedEnum::eBar;
+
+int x = 2;
+
+enum CEnum { eValue = 2 } ce;
+
+namespace A {
+
+enum AEnum { eValue = 0 } ae;
+
+void g() {
+  // break here for enumerator
+}
+
+}; // namespace A
+
+struct B {
+  enum BEnum { eValue = 1 } be;
+
+  void f() {
+    // break here for enumerator
+  }
+};
 
 int main (int argc, char const *argv[])
 {
@@ -44,5 +75,13 @@ int main (int argc, char const *argv[])
         DayType day = (DayType)day_value;
         printf("day as int is %i\n", (int)day); // Set break point at this line.
     }
+
+    A::g();
+
+    B b;
+    b.f();
+
+    // break here for enumerator
+
     return 0; // Break here for char tests
 }
diff --git a/lldb/packages/Python/lldbsuite/test/python_api/target/globals/TestTargetGlobals.py b/lldb/packages/Python/lldbsuite/test/python_api/target/globals/TestTargetGlobals.py
index e53b0367458b..49aa10a3da81 100644
--- a/lldb/packages/Python/lldbsuite/test/python_api/target/globals/TestTargetGlobals.py
+++ b/lldb/packages/Python/lldbsuite/test/python_api/target/globals/TestTargetGlobals.py
@@ -40,3 +40,20 @@ class TargetAPITestCase(TestBase):
         test_global_var(
             "global_var_of_char_type",
             "char global_var_of_char_type", "char", "'X'")
+
+        test_global_var("eFirst", "::eFirst", "MyEnum", "eFirst")
+        test_global_var("A::eMany", "A::eMany", "A::AEnum", "eMany")
+
+        # Global variable eFoo is looked up fine, since scoped enumeration
+        # members are not available as constants in the surrounding scope.
+        test_global_var("eFoo", "int eFoo", "int", "2")
+
+        # eBar is not available since it's a member of a scoped enumeration.
+        value_list = target.FindGlobalVariables("eBar", 1)
+        self.assertEqual(value_list.GetSize(), 0)
+
+        # Get enumerator values from all scopes.
+        value_list = target.FindGlobalVariables("eMany", 100500)
+        self.assertEqual(value_list.GetSize(), 3)
+        value_types = {value.GetTypeName() for value in value_list}
+        self.assertEqual(value_types, {"A::AEnum", "B::BEnum", "CEnum"})
diff --git a/lldb/packages/Python/lldbsuite/test/python_api/target/globals/main.cpp b/lldb/packages/Python/lldbsuite/test/python_api/target/globals/main.cpp
index e2095e800826..8db2a8d3bb32 100644
--- a/lldb/packages/Python/lldbsuite/test/python_api/target/globals/main.cpp
+++ b/lldb/packages/Python/lldbsuite/test/python_api/target/globals/main.cpp
@@ -9,4 +9,25 @@ const int Vars::static_const_out_out_class = 3;
 
 char global_var_of_char_type = 'X';
 
+namespace A {
+enum AEnum { eMany = 0 } ae;
+};
+
+struct B {
+  enum BEnum { eMany = 1 } be;
+} b;
+
+enum CEnum { eMany = 2 } ce;
+
+enum MyEnum {
+  eFirst,
+} my_enum;
+
+enum class MyScopedEnum {
+  eFoo = 1,
+  eBar,
+} my_scoped_enum;
+
+int eFoo = 2;
+
 int main() {}
diff --git a/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionDeclMap.cpp b/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionDeclMap.cpp
index bf3023be5f60..ba8ae9446e09 100644
--- a/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionDeclMap.cpp
+++ b/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionDeclMap.cpp
@@ -1594,6 +1594,23 @@ void ClangExpressionDeclMap::AddOneVariable(NameSearchContext &context,
       CompleteType(objc_object_ptr_type->getInterfaceDecl());
   }
 
+  // Check if this variable actually represents an unscoped enumeration
+  // constant. They're stored in the index with global variables and thus can be
+  // looked up as a global variable. But the declarations for the enumeration
+  // members (enumerators) are already generated and exist in the AST context.
+  // We just need to find the one corresponsing to this "variable".
+  if (const clang::EnumType *enum_type =
+          dyn_cast<clang::EnumType>(parser_opaque_type.getTypePtr())) {
+    if (!enum_type->isScopedEnumeralType()) {
+      for (clang::EnumConstantDecl *ecd : enum_type->getDecl()->enumerators()) {
+        if (ecd->getName() == var->GetUnqualifiedName().GetStringRef()) {
+          context.AddNamedDecl(ecd);
+          return;
+        }
+      }
+    }
+  }
+
   bool is_reference = pt.IsReferenceType();
 
   NamedDecl *var_decl = nullptr;
diff --git a/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp b/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp
index e92f50a70244..adfacb628094 100644
--- a/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp
+++ b/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp
@@ -3280,7 +3280,10 @@ DWARFASTParser::ParseChildArrayInfo(const DWARFDIE &parent_die,
 
 Type *DWARFASTParserClang::GetTypeForDIE(const DWARFDIE &die) {
   if (die) {
-    SymbolFileDWARF *dwarf = die.GetDWARF();
+    if (die.Tag() == DW_TAG_enumerator) {
+      return die.GetDWARF()->ResolveTypeUID(die.GetParent(), true);
+    }
+
     DWARFAttributes attributes;
     const size_t num_attributes = die.GetAttributes(attributes);
     if (num_attributes > 0) {
@@ -3291,7 +3294,7 @@ Type *DWARFASTParserClang::GetTypeForDIE(const DWARFDIE &die) {
 
         if (attr == DW_AT_type &&
             attributes.ExtractFormValueAtIndex(i, form_value))
-          return dwarf->ResolveTypeUID(form_value.Reference(), true);
+          return die.GetDWARF()->ResolveTypeUID(form_value.Reference(), true);
       }
     }
   }
@@ -3306,6 +3309,7 @@ clang::Decl *DWARFASTParserClang::GetClangDeclForDIE(const DWARFDIE &die) {
   switch (die.Tag()) {
   case DW_TAG_variable:
   case DW_TAG_constant:
+  case DW_TAG_enumerator:
   case DW_TAG_formal_parameter:
   case DW_TAG_imported_declaration:
   case DW_TAG_imported_module:
@@ -3351,6 +3355,28 @@ clang::Decl *DWARFASTParserClang::GetClangDeclForDIE(const DWARFDIE &die) {
     }
     break;
   }
+  case DW_TAG_enumerator: {
+    Type *type = GetTypeForDIE(die);
+    if (type) {
+      CompilerType compiler_type = type->GetForwardCompilerType();
+      clang::QualType qual_type = ClangUtil::GetQualType(compiler_type);
+      const clang::Type *clang_type = qual_type.getTypePtrOrNull();
+      if (clang_type) {
+        clang::EnumDecl *enum_decl =
+            llvm::dyn_cast_or_null<clang::EnumDecl>(clang_type->getAsTagDecl());
+        if (enum_decl) {
+          const char *name = die.GetName();
+          for (clang::EnumConstantDecl *ecd : enum_decl->enumerators()) {
+            if (ecd->getName() == name) {
+              decl = ecd;
+              break;
+            }
+          }
+        }
+      }
+    }
+    break;
+  }
   case DW_TAG_imported_declaration: {
     SymbolFileDWARF *dwarf = die.GetDWARF();
     DWARFDIE imported_uid = die.GetAttributeValueAsReferenceDIE(DW_AT_import);
diff --git a/lldb/source/Plugins/SymbolFile/DWARF/ManualDWARFIndex.cpp b/lldb/source/Plugins/SymbolFile/DWARF/ManualDWARFIndex.cpp
index 70d16a57207b..8b2a1b1014be 100644
--- a/lldb/source/Plugins/SymbolFile/DWARF/ManualDWARFIndex.cpp
+++ b/lldb/source/Plugins/SymbolFile/DWARF/ManualDWARFIndex.cpp
@@ -175,6 +175,7 @@ void ManualDWARFIndex::IndexUnitImpl(DWARFUnit &unit,
     bool is_declaration = false;
     // bool is_artificial = false;
     bool has_address = false;
+    bool is_enum_class = false;
     bool has_location_or_const_value = false;
     bool is_global_or_static_variable = false;
 
@@ -201,6 +202,11 @@ void ManualDWARFIndex::IndexUnitImpl(DWARFUnit &unit,
         //                        is_artificial = form_value.Unsigned() != 0;
         //                    break;
 
+        case DW_AT_enum_class:
+          if (attributes.ExtractFormValueAtIndex(i, form_value))
+            is_enum_class = form_value.Boolean();
+          break;
+
         case DW_AT_MIPS_linkage_name:
         case DW_AT_linkage_name:
           if (attributes.ExtractFormValueAtIndex(i, form_value))
@@ -366,6 +372,16 @@ void ManualDWARFIndex::IndexUnitImpl(DWARFUnit &unit,
       }
       if (mangled_cstr && !is_declaration)
         set.types.Insert(ConstString(mangled_cstr), ref);
+      // Unscoped enumerators are basically constants in the surrounding scope.
+      if (tag == DW_TAG_enumeration_type && !is_enum_class) {
+        for (const DWARFDebugInfoEntry *value = die.GetFirstChild();
+             value != nullptr; value = value->GetSibling()) {
+          if (value->Tag() == DW_TAG_enumerator) {
+            DIERef value_ref = DWARFDIE(&unit, value).GetDIERef().getValue();
+            set.globals.Insert(ConstString(value->GetName(&unit)), value_ref);
+          }
+        }
+      }
       break;
 
     case DW_TAG_namespace:
diff --git a/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp b/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp
index 94eb89215f64..79b01269a57e 100644
--- a/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp
+++ b/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp
@@ -2166,7 +2166,8 @@ void SymbolFileDWARF::FindGlobalVariables(
         case DW_TAG_catch_block:
           break;
 
-        case DW_TAG_variable: {
+        case DW_TAG_variable:
+        case DW_TAG_enumerator: {
           auto *dwarf_cu = llvm::dyn_cast<DWARFCompileUnit>(die.GetCU());
           if (!dwarf_cu)
             continue;
@@ -3434,6 +3435,7 @@ VariableSP SymbolFileDWARF::ParseVariableDIE(const SymbolContext &sc,
   ModuleSP module = GetObjectFile()->GetModule();
 
   if ((tag == DW_TAG_variable) || (tag == DW_TAG_constant) ||
+      (tag == DW_TAG_enumerator) ||
       (tag == DW_TAG_formal_parameter && sc.function)) {
     DWARFAttributes attributes;
     const size_t num_attributes = die.GetAttributes(attributes);
@@ -3443,7 +3445,7 @@ VariableSP SymbolFileDWARF::ParseVariableDIE(const SymbolContext &sc,
       const char *mangled = nullptr;
       Declaration decl;
       uint32_t i;
-      DWARFFormValue type_die_form;
+      DWARFDIE type_die;
       DWARFExpression location;
       bool is_external = false;
       bool is_artificial = false;
@@ -3477,7 +3479,7 @@ VariableSP SymbolFileDWARF::ParseVariableDIE(const SymbolContext &sc,
             mangled = form_value.AsCString();
             break;
           case DW_AT_type:
-            type_die_form = form_value;
+            type_die = form_value.Reference();
             break;
           case DW_AT_external:
             is_external = form_value.Boolean();
@@ -3593,6 +3595,11 @@ VariableSP SymbolFileDWARF::ParseVariableDIE(const SymbolContext &sc,
         }
       }
 
+      // For enumerators the type is their parent (DW_TAG_enumeration_type).
+      if (tag == DW_TAG_enumerator) {
+        type_die = die.GetParent();
+      }
+
       const DWARFDIE parent_context_die = GetDeclContextDIEContainingDIE(die);
       const dw_tag_t parent_tag = die.GetParent().Tag();
       bool is_static_member =
@@ -3619,7 +3626,8 @@ VariableSP SymbolFileDWARF::ParseVariableDIE(const SymbolContext &sc,
         // able to generate a fully qualified name from the
         // declaration context.
         if ((parent_tag == DW_TAG_compile_unit ||
-             parent_tag == DW_TAG_partial_unit) &&
+             parent_tag == DW_TAG_partial_unit ||
+             parent_tag == DW_TAG_enumeration_type) &&
             Language::LanguageIsCPlusPlus(die.GetLanguage())) {
           DWARFDeclContext decl_ctx;
 
@@ -3630,6 +3638,8 @@ VariableSP SymbolFileDWARF::ParseVariableDIE(const SymbolContext &sc,
 
       if (tag == DW_TAG_formal_parameter)
         scope = eValueTypeVariableArgument;
+      else if (tag == DW_TAG_enumerator)
+        scope = eValueTypeVariableGlobal;
       else {
         // DWARF doesn't specify if a DW_TAG_variable is a local, global
         // or static variable, so we have to do a little digging:
@@ -3774,7 +3784,7 @@ VariableSP SymbolFileDWARF::ParseVariableDIE(const SymbolContext &sc,
 
       if (symbol_context_scope) {
         SymbolFileTypeSP type_sp(
-            new SymbolFileType(*this, GetUID(type_die_form.Reference())));
+            new SymbolFileType(*this, GetUID(type_die)));
 
         if (const_value.Form() && type_sp && type_sp->GetType())
           location.UpdateValue(const_value.Unsigned(),
@@ -3873,6 +3883,7 @@ size_t SymbolFileDWARF::ParseVariables(const SymbolContext &sc,
     } else {
       // We haven't already parsed it, lets do that now.
       if ((tag == DW_TAG_variable) || (tag == DW_TAG_constant) ||
+          (tag == DW_TAG_enumerator) ||
           (tag == DW_TAG_formal_parameter && sc.function)) {
         if (variable_list_sp.get() == nullptr) {
           DWARFDIE sc_parent_die = GetParentSymbolContextDIE(orig_die);
diff --git a/lldb/source/Symbol/ClangASTContext.cpp b/lldb/source/Symbol/ClangASTContext.cpp
index ffde26aef0f8..4ad8b68fdfee 100644
--- a/lldb/source/Symbol/ClangASTContext.cpp
+++ b/lldb/source/Symbol/ClangASTContext.cpp
@@ -8991,6 +8991,14 @@ std::vector<CompilerDecl> ClangASTContext::DeclContextFindDeclByName(
                   found_decls.push_back(CompilerDecl(this, nd));
               }
             }
+          } else if (clang::EnumDecl *ed =
+                         llvm::dyn_cast<clang::EnumDecl>(child)) {
+            for (clang::EnumConstantDecl *ecd : ed->enumerators()) {
+              IdentifierInfo *ii = ecd->getIdentifier();
+              if (ii != nullptr &&
+                  ii->getName().equals(name.AsCString(nullptr)))
+                found_decls.push_back(CompilerDecl(this, ecd));
+            }
           } else if (clang::NamedDecl *nd =
                          llvm::dyn_cast<clang::NamedDecl>(child)) {
             IdentifierInfo *ii = nd->getIdentifier();
-- 
2.24.1.windows.2
