From cdf76317fabee34aff4613e02402efb26ba69d11 Mon Sep 17 00:00:00 2001
From: Andy Yankovsky <weratt@gmail.com>
Date: Fri, 15 Jan 2021 14:08:01 +0100
Subject: [lldb] Support unscoped enumeration members in the
 expression evaluator.

Add unscoped enumeration members to the "globals" manual dwarf index. This
effectively makes them discoverable as global variables (which they
essentially are).

Before expression evaluator failed to lookup enumerators unless the
enumeration type has been already completed.

Consider the example:

```
enum MyEnum { eFoo = 1 };
MyEnum my_enum = eFoo;
```
```
(lldb) p eFoo
error: <user expression 2>:1:1: use of undeclared identifier 'eFoo'
eFirst
^
(lldb) p my_enum + eFoo
(int) $0 = 2
```

With this patch all unscoped enumerators can be looked up same as the global
variables and the expression evaluation works as expected.
SBTarget::FindGlobalVariables() now returns unscoped enumerators as well.

---
 .../Clang/ClangExpressionDeclMap.cpp          | 17 ++++++++
 .../SymbolFile/DWARF/DWARFASTParserClang.cpp  | 30 ++++++++++++-
 .../SymbolFile/DWARF/ManualDWARFIndex.cpp     | 16 +++++++
 .../SymbolFile/DWARF/SymbolFileDWARF.cpp      | 26 ++++++++----
 .../TypeSystem/Clang/TypeSystemClang.cpp      |  8 ++++
 .../lang/cpp/enum_types/TestCPP11EnumTypes.py | 29 +++++++++++++
 lldb/test/API/lang/cpp/enum_types/main.cpp    | 42 ++++++++++++++++++-
 .../frame/globals/TestTargetGlobals.py        | 17 ++++++++
 .../API/python_api/frame/globals/main.cpp     | 21 ++++++++++
 .../SymbolFile/DWARF/x86/dwp-debug-types.s    |  3 +-
 10 files changed, 196 insertions(+), 13 deletions(-)

diff --git a/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionDeclMap.cpp b/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionDeclMap.cpp
index 4af5d41a5921..df547b3b00cc 100644
--- a/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionDeclMap.cpp
+++ b/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionDeclMap.cpp
@@ -1569,6 +1569,23 @@ void ClangExpressionDeclMap::AddOneVariable(NameSearchContext &context,
       CompleteType(objc_object_ptr_type->getInterfaceDecl());
   }
 
+  // Check if this variable actually represents an unscoped enumeration
+  // constant. They're stored in the index with global variables and thus can be
+  // looked up as a global variable. But the declarations for the enumeration
+  // members (enumerators) are already generated and exist in the AST context.
+  // We just need to find the one corresponsing to this "variable".
+  if (const clang::EnumType *enum_type =
+          dyn_cast<clang::EnumType>(parser_opaque_type.getTypePtr())) {
+    if (!enum_type->isScopedEnumeralType()) {
+      for (clang::EnumConstantDecl *ecd : enum_type->getDecl()->enumerators()) {
+        if (ecd->getName() == var->GetUnqualifiedName().GetStringRef()) {
+          context.AddNamedDecl(ecd);
+          return;
+        }
+      }
+    }
+  }
+
   bool is_reference = pt.IsReferenceType();
 
   NamedDecl *var_decl = nullptr;
diff --git a/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp b/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp
index 6745a4ad4884..81fbba0b058f 100644
--- a/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp
+++ b/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp
@@ -3223,7 +3223,10 @@ DWARFASTParser::ParseChildArrayInfo(const DWARFDIE &parent_die,
 
 Type *DWARFASTParserClang::GetTypeForDIE(const DWARFDIE &die) {
   if (die) {
-    SymbolFileDWARF *dwarf = die.GetDWARF();
+    if (die.Tag() == DW_TAG_enumerator) {
+      return die.GetDWARF()->ResolveTypeUID(die.GetParent(), true);
+    }
+
     DWARFAttributes attributes;
     const size_t num_attributes = die.GetAttributes(attributes);
     if (num_attributes > 0) {
@@ -3234,7 +3237,7 @@ Type *DWARFASTParserClang::GetTypeForDIE(const DWARFDIE &die) {
 
         if (attr == DW_AT_type &&
             attributes.ExtractFormValueAtIndex(i, form_value))
-          return dwarf->ResolveTypeUID(form_value.Reference(), true);
+          return die.GetDWARF()->ResolveTypeUID(form_value.Reference(), true);
       }
     }
   }
@@ -3249,6 +3252,7 @@ clang::Decl *DWARFASTParserClang::GetClangDeclForDIE(const DWARFDIE &die) {
   switch (die.Tag()) {
   case DW_TAG_variable:
   case DW_TAG_constant:
+  case DW_TAG_enumerator:
   case DW_TAG_formal_parameter:
   case DW_TAG_imported_declaration:
   case DW_TAG_imported_module:
@@ -3292,6 +3296,28 @@ clang::Decl *DWARFASTParserClang::GetClangDeclForDIE(const DWARFDIE &die) {
     }
     break;
   }
+  case DW_TAG_enumerator: {
+    Type *type = GetTypeForDIE(die);
+    if (type) {
+      CompilerType compiler_type = type->GetForwardCompilerType();
+      clang::QualType qual_type = ClangUtil::GetQualType(compiler_type);
+      const clang::Type *clang_type = qual_type.getTypePtrOrNull();
+      if (clang_type) {
+        clang::EnumDecl *enum_decl =
+            llvm::dyn_cast_or_null<clang::EnumDecl>(clang_type->getAsTagDecl());
+        if (enum_decl) {
+          const char *name = die.GetName();
+          for (clang::EnumConstantDecl *ecd : enum_decl->enumerators()) {
+            if (ecd->getName() == name) {
+              decl = ecd;
+              break;
+            }
+          }
+        }
+      }
+    }
+    break;
+  }
   case DW_TAG_imported_declaration: {
     SymbolFileDWARF *dwarf = die.GetDWARF();
     DWARFDIE imported_uid = die.GetAttributeValueAsReferenceDIE(DW_AT_import);
diff --git a/lldb/source/Plugins/SymbolFile/DWARF/ManualDWARFIndex.cpp b/lldb/source/Plugins/SymbolFile/DWARF/ManualDWARFIndex.cpp
index c6d18c5cf075..8e57fb6ce092 100644
--- a/lldb/source/Plugins/SymbolFile/DWARF/ManualDWARFIndex.cpp
+++ b/lldb/source/Plugins/SymbolFile/DWARF/ManualDWARFIndex.cpp
@@ -226,6 +226,7 @@ void ManualDWARFIndex::IndexUnitImpl(DWARFUnit &unit,
     bool is_declaration = false;
     // bool is_artificial = false;
     bool has_address = false;
+    bool is_enum_class = false;
     bool has_location_or_const_value = false;
     bool is_global_or_static_variable = false;
 
@@ -246,6 +247,11 @@ void ManualDWARFIndex::IndexUnitImpl(DWARFUnit &unit,
             is_declaration = form_value.Unsigned() != 0;
           break;
 
+        case DW_AT_enum_class:
+          if (attributes.ExtractFormValueAtIndex(i, form_value))
+            is_enum_class = form_value.Boolean();
+          break;
+
         case DW_AT_MIPS_linkage_name:
         case DW_AT_linkage_name:
           if (attributes.ExtractFormValueAtIndex(i, form_value))
@@ -370,6 +376,16 @@ void ManualDWARFIndex::IndexUnitImpl(DWARFUnit &unit,
       }
       if (mangled_cstr && !is_declaration)
         set.types.Insert(ConstString(mangled_cstr), ref);
+      // Unscoped enumerators are basically constants in the surrounding scope.
+      if (tag == DW_TAG_enumeration_type && !is_enum_class) {
+        for (const DWARFDebugInfoEntry *value = die.GetFirstChild();
+             value != nullptr; value = value->GetSibling()) {
+          if (value->Tag() == DW_TAG_enumerator) {
+            DIERef value_ref = DWARFDIE(&unit, value).GetDIERef().getValue();
+            set.globals.Insert(ConstString(value->GetName(&unit)), value_ref);
+          }
+        }
+      }
       break;
 
     case DW_TAG_namespace:
diff --git a/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp b/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp
index d53167325bb1..e63a17bad1a0 100644
--- a/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp
+++ b/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp
@@ -2130,7 +2130,6 @@ void SymbolFileDWARF::FindGlobalVariables(
     uint32_t max_matches, VariableList &variables) {
   std::lock_guard<std::recursive_mutex> guard(GetModuleMutex());
   Log *log = GetLog(DWARFLog::Lookups);
-
   if (log)
     GetObjectFile()->GetModule()->LogMessage(
         log,
@@ -2163,8 +2162,7 @@ void SymbolFileDWARF::FindGlobalVariables(
     if (!sc.module_sp)
       sc.module_sp = m_objfile_sp->GetModule();
     assert(sc.module_sp);
-
-    if (die.Tag() != DW_TAG_variable)
+    if (die.Tag() != DW_TAG_variable && die.Tag() != DW_TAG_enumerator)
       return true;
 
     auto *dwarf_cu = llvm::dyn_cast<DWARFCompileUnit>(die.GetCU());
@@ -3293,7 +3291,7 @@ VariableSP SymbolFileDWARF::ParseVariableDIE(const SymbolContext &sc,
   const dw_tag_t tag = die.Tag();
   ModuleSP module = GetObjectFile()->GetModule();
 
-  if (tag != DW_TAG_variable && tag != DW_TAG_constant &&
+  if (tag != DW_TAG_variable && tag != DW_TAG_constant && tag != DW_TAG_enumerator &&
       (tag != DW_TAG_formal_parameter || !sc.function))
     return nullptr;
 
@@ -3302,7 +3300,7 @@ VariableSP SymbolFileDWARF::ParseVariableDIE(const SymbolContext &sc,
   const char *name = nullptr;
   const char *mangled = nullptr;
   Declaration decl;
-  DWARFFormValue type_die_form;
+  DWARFDIE type_die;
   DWARFExpression location;
   bool is_external = false;
   bool is_artificial = false;
@@ -3334,7 +3332,7 @@ VariableSP SymbolFileDWARF::ParseVariableDIE(const SymbolContext &sc,
       mangled = form_value.AsCString();
       break;
     case DW_AT_type:
-      type_die_form = form_value;
+      type_die = form_value.Reference();
       break;
     case DW_AT_external:
       is_external = form_value.Boolean();
@@ -3421,6 +3419,11 @@ VariableSP SymbolFileDWARF::ParseVariableDIE(const SymbolContext &sc,
     }
   }
 
+  // For enumerators the type is their parent (DW_TAG_enumeration_type).
+  if (tag == DW_TAG_enumerator) {
+    type_die = die.GetParent();
+  }
+
   const DWARFDIE parent_context_die = GetDeclContextDIEContainingDIE(die);
   const DWARFDIE sc_parent_die = GetParentSymbolContextDIE(die);
   const dw_tag_t parent_tag = sc_parent_die.Tag();
@@ -3445,7 +3448,8 @@ VariableSP SymbolFileDWARF::ParseVariableDIE(const SymbolContext &sc,
     // able to generate a fully qualified name from the
     // declaration context.
     if ((parent_tag == DW_TAG_compile_unit ||
-         parent_tag == DW_TAG_partial_unit) &&
+         parent_tag == DW_TAG_partial_unit ||
+         parent_tag == DW_TAG_enumeration_type) &&
         Language::LanguageIsCPlusPlus(GetLanguage(*die.GetCU())))
       mangled =
           GetDWARFDeclContext(die).GetQualifiedNameAsConstString().GetCString();
@@ -3453,6 +3457,8 @@ VariableSP SymbolFileDWARF::ParseVariableDIE(const SymbolContext &sc,
 
   if (tag == DW_TAG_formal_parameter)
     scope = eValueTypeVariableArgument;
+  else if (tag == DW_TAG_enumerator)
+    scope = eValueTypeVariableGlobal;
   else {
     // DWARF doesn't specify if a DW_TAG_variable is a local, global
     // or static variable, so we have to do a little digging:
@@ -3601,7 +3607,7 @@ VariableSP SymbolFileDWARF::ParseVariableDIE(const SymbolContext &sc,
   }
 
   auto type_sp = std::make_shared<SymbolFileType>(
-      *this, GetUID(type_die_form.Reference()));
+      *this, GetUID(type_die));
 
   if (use_type_size_for_value && type_sp->GetType())
     location.UpdateValue(const_value_form.Unsigned(),
@@ -3665,7 +3671,8 @@ void SymbolFileDWARF::ParseAndAppendGlobalVariable(
     return;
 
   dw_tag_t tag = die.Tag();
-  if (tag != DW_TAG_variable && tag != DW_TAG_constant)
+  if (tag != DW_TAG_variable && tag != DW_TAG_constant &&
+      tag != DW_TAG_enumerator)
     return;
 
   // Check to see if we have already parsed this variable or constant?
@@ -3814,6 +3821,7 @@ size_t SymbolFileDWARF::ParseVariablesInFunctionContextRecursive(
   dw_tag_t tag = die.Tag();
 
   if ((tag == DW_TAG_variable) || (tag == DW_TAG_constant) ||
+      (tag == DW_TAG_enumerator) ||
       (tag == DW_TAG_formal_parameter)) {
     accumulator.push_back(*die.GetDIERef());
   }
diff --git a/lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.cpp b/lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.cpp
index 418f613e5cc9..0038ebe2dffb 100644
--- a/lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.cpp
+++ b/lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.cpp
@@ -9466,6 +9466,14 @@ std::vector<CompilerDecl> TypeSystemClang::DeclContextFindDeclByName(
                   found_decls.push_back(GetCompilerDecl(nd));
               }
             }
+          } else if (clang::EnumDecl *ed =
+                         llvm::dyn_cast<clang::EnumDecl>(child)) {
+            for (clang::EnumConstantDecl *ecd : ed->enumerators()) {
+              IdentifierInfo *ii = ecd->getIdentifier();
+              if (ii != nullptr &&
+                  ii->getName().equals(name.AsCString(nullptr)))
+                found_decls.push_back(GetCompilerDecl(ecd));
+            }
           } else if (clang::NamedDecl *nd =
                          llvm::dyn_cast<clang::NamedDecl>(child)) {
             IdentifierInfo *ii = nd->getIdentifier();
diff --git a/lldb/test/API/lang/cpp/enum_types/TestCPP11EnumTypes.py b/lldb/test/API/lang/cpp/enum_types/TestCPP11EnumTypes.py
index b0a52e1552a6..2a82ac9edd24 100644
--- a/lldb/test/API/lang/cpp/enum_types/TestCPP11EnumTypes.py
+++ b/lldb/test/API/lang/cpp/enum_types/TestCPP11EnumTypes.py
@@ -51,3 +51,32 @@ class CPP11EnumTypesTestCase(TestBase):
         self.check_enum("l")
         self.check_enum("ull")
         self.check_enum("ll")
+
+        self.expect_expr("eFoo", result_type="MyEnum", result_value="eFoo")
+        self.expect_expr("MyEnum::eFoo", result_type="MyEnum", result_value="eFoo")
+        self.expect_expr("my_enum + eFoo + MyEnum::eFoo", result_value="3")
+
+        self.expect("p eBar", error=True,
+                    substrs=["use of undeclared identifier 'eBar'"])
+
+    @skipIf(dwarf_version=['<', '4'])
+    def test_enums_from_different_scopes(self):
+        self.build()
+        _ = self.dbg.CreateTarget(self.getBuildArtifact())
+
+        lldbutil.run_break_set_by_source_regexp(
+            self, "// break here", num_expected_locations=3)
+
+        # Break in A::g()
+        self.runCmd("run")
+        self.expect_expr("eValue", result_type="A::AEnum", result_value="eValue")
+
+        # Break in B::f()
+        self.runCmd("continue")
+        self.expect_expr("eValue", result_type="B::BEnum", result_value="eValue")
+
+        # Break in main()
+        self.runCmd("continue")
+        self.expect_expr("eValue", result_type="CEnum", result_value="eValue")
+
+        self.runCmd("kill")
\ No newline at end of file
diff --git a/lldb/test/API/lang/cpp/enum_types/main.cpp b/lldb/test/API/lang/cpp/enum_types/main.cpp
index be895208c7d4..3f0fb9d7e341 100644
--- a/lldb/test/API/lang/cpp/enum_types/main.cpp
+++ b/lldb/test/API/lang/cpp/enum_types/main.cpp
@@ -25,4 +25,44 @@ DEFINE_SIGNED_ENUM(l, signed long)
 DEFINE_UNSIGNED_ENUM(ull, unsigned long long)
 DEFINE_SIGNED_ENUM(ll, signed long long)
 
-int main(int argc, char const *argv[]) { return 0; }
+enum MyEnum {
+  eFoo = 1,
+};
+MyEnum my_enum = eFoo;
+
+enum class MyScopedEnum {
+  eBar = 1,
+};
+MyScopedEnum my_scoped_enum = MyScopedEnum::eBar;
+
+int x = 2;
+
+enum CEnum { eValue = 2 } ce;
+
+namespace A {
+
+enum AEnum { eValue = 0 } ae;
+
+void g() {
+  // break here
+}
+
+}; // namespace A
+
+struct B {
+  enum BEnum { eValue = 1 } be;
+
+  void f() {
+    // break here
+  }
+};
+
+int main() {
+  A::g();
+
+  B b;
+  b.f();
+
+  // break here
+  return 0;
+}
\ No newline at end of file
diff --git a/lldb/test/API/python_api/frame/globals/TestTargetGlobals.py b/lldb/test/API/python_api/frame/globals/TestTargetGlobals.py
index edbd97ceadaf..455a5c8570e8 100644
--- a/lldb/test/API/python_api/frame/globals/TestTargetGlobals.py
+++ b/lldb/test/API/python_api/frame/globals/TestTargetGlobals.py
@@ -40,3 +40,20 @@ class TargetAPITestCase(TestBase):
         test_global_var(
             "global_var_of_char_type",
             "::global_var_of_char_type", "char", "'X'")
+
+        test_global_var("eFirst", "::eFirst", "MyEnum", "eFirst")
+        test_global_var("A::eMany", "A::eMany", "A::AEnum", "eMany")
+
+        # Global variable eFoo is looked up fine, since scoped enumeration
+        # members are not available as constants in the surrounding scope.
+        test_global_var("eFoo", "::eFoo", "int", "2")
+
+        # eBar is not available since it's a member of a scoped enumeration.
+        value_list = target.FindGlobalVariables("eBar", 1)
+        self.assertEqual(value_list.GetSize(), 0)
+
+        # Get enumerator values from all scopes.
+        value_list = target.FindGlobalVariables("eMany", 100500)
+        self.assertEqual(value_list.GetSize(), 3)
+        value_types = {value.GetTypeName() for value in value_list}
+        self.assertEqual(value_types, {"A::AEnum", "B::BEnum", "CEnum"})
diff --git a/lldb/test/API/python_api/frame/globals/main.cpp b/lldb/test/API/python_api/frame/globals/main.cpp
index e2095e800826..8db2a8d3bb32 100644
--- a/lldb/test/API/python_api/frame/globals/main.cpp
+++ b/lldb/test/API/python_api/frame/globals/main.cpp
@@ -9,4 +9,25 @@ const int Vars::static_const_out_out_class = 3;
 
 char global_var_of_char_type = 'X';
 
+namespace A {
+enum AEnum { eMany = 0 } ae;
+};
+
+struct B {
+  enum BEnum { eMany = 1 } be;
+} b;
+
+enum CEnum { eMany = 2 } ce;
+
+enum MyEnum {
+  eFirst,
+} my_enum;
+
+enum class MyScopedEnum {
+  eFoo = 1,
+  eBar,
+} my_scoped_enum;
+
+int eFoo = 2;
+
 int main() {}
diff --git a/lldb/test/Shell/SymbolFile/DWARF/x86/dwp-debug-types.s b/lldb/test/Shell/SymbolFile/DWARF/x86/dwp-debug-types.s
index e8e276b1db71..8e6a7f0503a6 100644
--- a/lldb/test/Shell/SymbolFile/DWARF/x86/dwp-debug-types.s
+++ b/lldb/test/Shell/SymbolFile/DWARF/x86/dwp-debug-types.s
@@ -16,7 +16,8 @@
 # SYMBOLS:      Globals and statics:
 # SYMBOLS-DAG: INFO/00000023 "A"
 # SYMBOLS-DAG: INFO/0000005a "A"
-# SYMBOLS-EMPTY:
+# SYMBOLS-DAG: TYPE/00000024 "case0"
+# SYMBOLS-DAG: TYPE/00000059 "case0"
 
 # SYMBOLS: Types:
 # SYMBOLS-DAG: TYPE/00000018 "ENUM0"
-- 
2.38.0.rc1.362.ged0d419d3c-goog

