// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package Debugger.SbBreakpointLocationRpc;

import "Common.proto";

service SbBreakpointLocationRpcService {
  rpc SetEnabled(SetEnabledRequest) returns (SetEnabledResponse) {
  }
  rpc GetBreakpoint(GetBreakpointRequest) returns (GetBreakpointResponse) {
  }
  rpc GetAddress(GetAddressRequest) returns (GetAddressResponse) {
  }
  rpc GetLoadAddress(GetLoadAddressRequest) returns (GetLoadAddressResponse) {
  }
  rpc SetCondition(SetConditionRequest) returns (SetConditionResponse) {
  }
  rpc SetIgnoreCount(SetIgnoreCountRequest) returns (SetIgnoreCountResponse) {
  }
}

message SetEnabledRequest {
  Common.GrpcSbBreakpointLocation breakpoint_location = 1;
  bool enabled = 2;
}

message SetEnabledResponse {
}

message GetBreakpointRequest {
  Common.GrpcSbBreakpointLocation breakpoint_location = 1;
}

message GetBreakpointResponse {
  Common.GrpcSbBreakpoint result = 1;
}

message GetAddressRequest {
  Common.GrpcSbBreakpointLocation breakpoint_location = 1;
}

message GetAddressResponse {
  Common.GrpcSbAddress address = 1;
}

message GetLoadAddressRequest {
  Common.GrpcSbBreakpointLocation breakpoint_location = 1;
}

message GetLoadAddressResponse {
  uint64 load_address = 1;
}

message SetConditionRequest {
  Common.GrpcSbBreakpointLocation breakpoint_location = 1;
  string condition = 2;
}

message SetConditionResponse {
}

message SetIgnoreCountRequest {
  Common.GrpcSbBreakpointLocation breakpoint_location = 1;
  uint32 ignoreCount = 2;
}

message SetIgnoreCountResponse {
}
